// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.ozon.dev/ArtoriasAbW/homework-01/internal/pkg/repository/models"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AddAuthor mocks base method.
func (m *MockInterface) AddAuthor(ctx context.Context, author models.Author) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthor", ctx, author)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthor indicates an expected call of AddAuthor.
func (mr *MockInterfaceMockRecorder) AddAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthor", reflect.TypeOf((*MockInterface)(nil).AddAuthor), ctx, author)
}

// AddBook mocks base method.
func (m *MockInterface) AddBook(ctx context.Context, b models.Book) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", ctx, b)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockInterfaceMockRecorder) AddBook(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockInterface)(nil).AddBook), ctx, b)
}

// AddReview mocks base method.
func (m *MockInterface) AddReview(ctx context.Context, review models.Review) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", ctx, review)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReview indicates an expected call of AddReview.
func (mr *MockInterfaceMockRecorder) AddReview(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockInterface)(nil).AddReview), ctx, review)
}

// AddUser mocks base method.
func (m *MockInterface) AddUser(ctx context.Context, user models.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockInterfaceMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockInterface)(nil).AddUser), ctx, user)
}

// DeleteAuthor mocks base method.
func (m *MockInterface) DeleteAuthor(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockInterfaceMockRecorder) DeleteAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*MockInterface)(nil).DeleteAuthor), ctx, id)
}

// DeleteBook mocks base method.
func (m *MockInterface) DeleteBook(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockInterfaceMockRecorder) DeleteBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockInterface)(nil).DeleteBook), ctx, id)
}

// DeleteReview mocks base method.
func (m *MockInterface) DeleteReview(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockInterfaceMockRecorder) DeleteReview(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockInterface)(nil).DeleteReview), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockInterface) DeleteUser(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockInterfaceMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockInterface)(nil).DeleteUser), ctx, id)
}

// GetAuthorByID mocks base method.
func (m *MockInterface) GetAuthorByID(ctx context.Context, id uint) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorByID", ctx, id)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByID indicates an expected call of GetAuthorByID.
func (mr *MockInterfaceMockRecorder) GetAuthorByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByID", reflect.TypeOf((*MockInterface)(nil).GetAuthorByID), ctx, id)
}

// GetBookByID mocks base method.
func (m *MockInterface) GetBookByID(ctx context.Context, id uint) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", ctx, id)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockInterfaceMockRecorder) GetBookByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*MockInterface)(nil).GetBookByID), ctx, id)
}

// GetReviewByID mocks base method.
func (m *MockInterface) GetReviewByID(ctx context.Context, id uint) (models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByID", ctx, id)
	ret0, _ := ret[0].(models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByID indicates an expected call of GetReviewByID.
func (mr *MockInterfaceMockRecorder) GetReviewByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByID", reflect.TypeOf((*MockInterface)(nil).GetReviewByID), ctx, id)
}

// GetUserByID mocks base method.
func (m *MockInterface) GetUserByID(ctx context.Context, id uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockInterfaceMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockInterface)(nil).GetUserByID), ctx, id)
}

// ListAuthors mocks base method.
func (m *MockInterface) ListAuthors(ctx context.Context, params models.ListInput) ([]models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthors", ctx, params)
	ret0, _ := ret[0].([]models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthors indicates an expected call of ListAuthors.
func (mr *MockInterfaceMockRecorder) ListAuthors(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthors", reflect.TypeOf((*MockInterface)(nil).ListAuthors), ctx, params)
}

// ListBooks mocks base method.
func (m *MockInterface) ListBooks(ctx context.Context, params models.ListInput) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", ctx, params)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockInterfaceMockRecorder) ListBooks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockInterface)(nil).ListBooks), ctx, params)
}

// ListReviews mocks base method.
func (m *MockInterface) ListReviews(ctx context.Context, params models.ListInput) ([]models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", ctx, params)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockInterfaceMockRecorder) ListReviews(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*MockInterface)(nil).ListReviews), ctx, params)
}

// ListUsers mocks base method.
func (m *MockInterface) ListUsers(ctx context.Context, params models.ListInput) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, params)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockInterfaceMockRecorder) ListUsers(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockInterface)(nil).ListUsers), ctx, params)
}

// UpdateAuthor mocks base method.
func (m *MockInterface) UpdateAuthor(ctx context.Context, author models.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", ctx, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockInterfaceMockRecorder) UpdateAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockInterface)(nil).UpdateAuthor), ctx, author)
}

// UpdateBook mocks base method.
func (m *MockInterface) UpdateBook(ctx context.Context, book models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockInterfaceMockRecorder) UpdateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockInterface)(nil).UpdateBook), ctx, book)
}

// UpdateReview mocks base method.
func (m *MockInterface) UpdateReview(ctx context.Context, review models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", ctx, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockInterfaceMockRecorder) UpdateReview(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockInterface)(nil).UpdateReview), ctx, review)
}

// UpdateUser mocks base method.
func (m *MockInterface) UpdateUser(ctx context.Context, newUser models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockInterfaceMockRecorder) UpdateUser(ctx, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockInterface)(nil).UpdateUser), ctx, newUser)
}

// Mockbook is a mock of book interface.
type Mockbook struct {
	ctrl     *gomock.Controller
	recorder *MockbookMockRecorder
}

// MockbookMockRecorder is the mock recorder for Mockbook.
type MockbookMockRecorder struct {
	mock *Mockbook
}

// NewMockbook creates a new mock instance.
func NewMockbook(ctrl *gomock.Controller) *Mockbook {
	mock := &Mockbook{ctrl: ctrl}
	mock.recorder = &MockbookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockbook) EXPECT() *MockbookMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *Mockbook) AddBook(ctx context.Context, b models.Book) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", ctx, b)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockbookMockRecorder) AddBook(ctx, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*Mockbook)(nil).AddBook), ctx, b)
}

// DeleteBook mocks base method.
func (m *Mockbook) DeleteBook(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockbookMockRecorder) DeleteBook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*Mockbook)(nil).DeleteBook), ctx, id)
}

// GetBookByID mocks base method.
func (m *Mockbook) GetBookByID(ctx context.Context, id uint) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookByID", ctx, id)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookByID indicates an expected call of GetBookByID.
func (mr *MockbookMockRecorder) GetBookByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookByID", reflect.TypeOf((*Mockbook)(nil).GetBookByID), ctx, id)
}

// ListBooks mocks base method.
func (m *Mockbook) ListBooks(ctx context.Context, params models.ListInput) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", ctx, params)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockbookMockRecorder) ListBooks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*Mockbook)(nil).ListBooks), ctx, params)
}

// UpdateBook mocks base method.
func (m *Mockbook) UpdateBook(ctx context.Context, book models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockbookMockRecorder) UpdateBook(ctx, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*Mockbook)(nil).UpdateBook), ctx, book)
}

// Mockuser is a mock of user interface.
type Mockuser struct {
	ctrl     *gomock.Controller
	recorder *MockuserMockRecorder
}

// MockuserMockRecorder is the mock recorder for Mockuser.
type MockuserMockRecorder struct {
	mock *Mockuser
}

// NewMockuser creates a new mock instance.
func NewMockuser(ctrl *gomock.Controller) *Mockuser {
	mock := &Mockuser{ctrl: ctrl}
	mock.recorder = &MockuserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockuser) EXPECT() *MockuserMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *Mockuser) AddUser(ctx context.Context, user models.User) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockuserMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*Mockuser)(nil).AddUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *Mockuser) DeleteUser(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockuserMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*Mockuser)(nil).DeleteUser), ctx, id)
}

// GetUserByID mocks base method.
func (m *Mockuser) GetUserByID(ctx context.Context, id uint) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockuserMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*Mockuser)(nil).GetUserByID), ctx, id)
}

// ListUsers mocks base method.
func (m *Mockuser) ListUsers(ctx context.Context, params models.ListInput) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, params)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockuserMockRecorder) ListUsers(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*Mockuser)(nil).ListUsers), ctx, params)
}

// UpdateUser mocks base method.
func (m *Mockuser) UpdateUser(ctx context.Context, newUser models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockuserMockRecorder) UpdateUser(ctx, newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*Mockuser)(nil).UpdateUser), ctx, newUser)
}

// Mockauthor is a mock of author interface.
type Mockauthor struct {
	ctrl     *gomock.Controller
	recorder *MockauthorMockRecorder
}

// MockauthorMockRecorder is the mock recorder for Mockauthor.
type MockauthorMockRecorder struct {
	mock *Mockauthor
}

// NewMockauthor creates a new mock instance.
func NewMockauthor(ctrl *gomock.Controller) *Mockauthor {
	mock := &Mockauthor{ctrl: ctrl}
	mock.recorder = &MockauthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockauthor) EXPECT() *MockauthorMockRecorder {
	return m.recorder
}

// AddAuthor mocks base method.
func (m *Mockauthor) AddAuthor(ctx context.Context, author models.Author) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthor", ctx, author)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthor indicates an expected call of AddAuthor.
func (mr *MockauthorMockRecorder) AddAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthor", reflect.TypeOf((*Mockauthor)(nil).AddAuthor), ctx, author)
}

// DeleteAuthor mocks base method.
func (m *Mockauthor) DeleteAuthor(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthor indicates an expected call of DeleteAuthor.
func (mr *MockauthorMockRecorder) DeleteAuthor(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthor", reflect.TypeOf((*Mockauthor)(nil).DeleteAuthor), ctx, id)
}

// GetAuthorByID mocks base method.
func (m *Mockauthor) GetAuthorByID(ctx context.Context, id uint) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorByID", ctx, id)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByID indicates an expected call of GetAuthorByID.
func (mr *MockauthorMockRecorder) GetAuthorByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByID", reflect.TypeOf((*Mockauthor)(nil).GetAuthorByID), ctx, id)
}

// ListAuthors mocks base method.
func (m *Mockauthor) ListAuthors(ctx context.Context, params models.ListInput) ([]models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthors", ctx, params)
	ret0, _ := ret[0].([]models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthors indicates an expected call of ListAuthors.
func (mr *MockauthorMockRecorder) ListAuthors(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthors", reflect.TypeOf((*Mockauthor)(nil).ListAuthors), ctx, params)
}

// UpdateAuthor mocks base method.
func (m *Mockauthor) UpdateAuthor(ctx context.Context, author models.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", ctx, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockauthorMockRecorder) UpdateAuthor(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*Mockauthor)(nil).UpdateAuthor), ctx, author)
}

// Mockreview is a mock of review interface.
type Mockreview struct {
	ctrl     *gomock.Controller
	recorder *MockreviewMockRecorder
}

// MockreviewMockRecorder is the mock recorder for Mockreview.
type MockreviewMockRecorder struct {
	mock *Mockreview
}

// NewMockreview creates a new mock instance.
func NewMockreview(ctrl *gomock.Controller) *Mockreview {
	mock := &Mockreview{ctrl: ctrl}
	mock.recorder = &MockreviewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockreview) EXPECT() *MockreviewMockRecorder {
	return m.recorder
}

// AddReview mocks base method.
func (m *Mockreview) AddReview(ctx context.Context, review models.Review) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", ctx, review)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReview indicates an expected call of AddReview.
func (mr *MockreviewMockRecorder) AddReview(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*Mockreview)(nil).AddReview), ctx, review)
}

// DeleteReview mocks base method.
func (m *Mockreview) DeleteReview(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockreviewMockRecorder) DeleteReview(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*Mockreview)(nil).DeleteReview), ctx, id)
}

// GetReviewByID mocks base method.
func (m *Mockreview) GetReviewByID(ctx context.Context, id uint) (models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewByID", ctx, id)
	ret0, _ := ret[0].(models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewByID indicates an expected call of GetReviewByID.
func (mr *MockreviewMockRecorder) GetReviewByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewByID", reflect.TypeOf((*Mockreview)(nil).GetReviewByID), ctx, id)
}

// ListReviews mocks base method.
func (m *Mockreview) ListReviews(ctx context.Context, params models.ListInput) ([]models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviews", ctx, params)
	ret0, _ := ret[0].([]models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviews indicates an expected call of ListReviews.
func (mr *MockreviewMockRecorder) ListReviews(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviews", reflect.TypeOf((*Mockreview)(nil).ListReviews), ctx, params)
}

// UpdateReview mocks base method.
func (m *Mockreview) UpdateReview(ctx context.Context, review models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", ctx, review)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockreviewMockRecorder) UpdateReview(ctx, review interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*Mockreview)(nil).UpdateReview), ctx, review)
}
