// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: review.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewClient is the client API for Review service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewClient interface {
	ReviewGet(ctx context.Context, in *ReviewGetRequest, opts ...grpc.CallOption) (*ReviewGetResponse, error)
	ReviewCreate(ctx context.Context, in *ReviewCreateRequest, opts ...grpc.CallOption) (*ReviewCreateResponse, error)
	ReviewList(ctx context.Context, in *ReviewListRequest, opts ...grpc.CallOption) (*ReviewListResponse, error)
	ReviewUpdate(ctx context.Context, in *ReviewUpdateRequest, opts ...grpc.CallOption) (*ReviewUpdateResponse, error)
	ReviewDelete(ctx context.Context, in *ReviewDeleteRequest, opts ...grpc.CallOption) (*ReviewDeleteResponse, error)
}

type reviewClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewClient(cc grpc.ClientConnInterface) ReviewClient {
	return &reviewClient{cc}
}

func (c *reviewClient) ReviewGet(ctx context.Context, in *ReviewGetRequest, opts ...grpc.CallOption) (*ReviewGetResponse, error) {
	out := new(ReviewGetResponse)
	err := c.cc.Invoke(ctx, "/api.Review/ReviewGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) ReviewCreate(ctx context.Context, in *ReviewCreateRequest, opts ...grpc.CallOption) (*ReviewCreateResponse, error) {
	out := new(ReviewCreateResponse)
	err := c.cc.Invoke(ctx, "/api.Review/ReviewCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) ReviewList(ctx context.Context, in *ReviewListRequest, opts ...grpc.CallOption) (*ReviewListResponse, error) {
	out := new(ReviewListResponse)
	err := c.cc.Invoke(ctx, "/api.Review/ReviewList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) ReviewUpdate(ctx context.Context, in *ReviewUpdateRequest, opts ...grpc.CallOption) (*ReviewUpdateResponse, error) {
	out := new(ReviewUpdateResponse)
	err := c.cc.Invoke(ctx, "/api.Review/ReviewUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) ReviewDelete(ctx context.Context, in *ReviewDeleteRequest, opts ...grpc.CallOption) (*ReviewDeleteResponse, error) {
	out := new(ReviewDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.Review/ReviewDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServer is the server API for Review service.
// All implementations must embed UnimplementedReviewServer
// for forward compatibility
type ReviewServer interface {
	ReviewGet(context.Context, *ReviewGetRequest) (*ReviewGetResponse, error)
	ReviewCreate(context.Context, *ReviewCreateRequest) (*ReviewCreateResponse, error)
	ReviewList(context.Context, *ReviewListRequest) (*ReviewListResponse, error)
	ReviewUpdate(context.Context, *ReviewUpdateRequest) (*ReviewUpdateResponse, error)
	ReviewDelete(context.Context, *ReviewDeleteRequest) (*ReviewDeleteResponse, error)
	mustEmbedUnimplementedReviewServer()
}

// UnimplementedReviewServer must be embedded to have forward compatible implementations.
type UnimplementedReviewServer struct {
}

func (UnimplementedReviewServer) ReviewGet(context.Context, *ReviewGetRequest) (*ReviewGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewGet not implemented")
}
func (UnimplementedReviewServer) ReviewCreate(context.Context, *ReviewCreateRequest) (*ReviewCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewCreate not implemented")
}
func (UnimplementedReviewServer) ReviewList(context.Context, *ReviewListRequest) (*ReviewListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewList not implemented")
}
func (UnimplementedReviewServer) ReviewUpdate(context.Context, *ReviewUpdateRequest) (*ReviewUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewUpdate not implemented")
}
func (UnimplementedReviewServer) ReviewDelete(context.Context, *ReviewDeleteRequest) (*ReviewDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewDelete not implemented")
}
func (UnimplementedReviewServer) mustEmbedUnimplementedReviewServer() {}

// UnsafeReviewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServer will
// result in compilation errors.
type UnsafeReviewServer interface {
	mustEmbedUnimplementedReviewServer()
}

func RegisterReviewServer(s grpc.ServiceRegistrar, srv ReviewServer) {
	s.RegisterService(&Review_ServiceDesc, srv)
}

func _Review_ReviewGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).ReviewGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Review/ReviewGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).ReviewGet(ctx, req.(*ReviewGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_ReviewCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).ReviewCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Review/ReviewCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).ReviewCreate(ctx, req.(*ReviewCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_ReviewList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).ReviewList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Review/ReviewList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).ReviewList(ctx, req.(*ReviewListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_ReviewUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).ReviewUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Review/ReviewUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).ReviewUpdate(ctx, req.(*ReviewUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_ReviewDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).ReviewDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Review/ReviewDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).ReviewDelete(ctx, req.(*ReviewDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Review_ServiceDesc is the grpc.ServiceDesc for Review service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Review_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Review",
	HandlerType: (*ReviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReviewGet",
			Handler:    _Review_ReviewGet_Handler,
		},
		{
			MethodName: "ReviewCreate",
			Handler:    _Review_ReviewCreate_Handler,
		},
		{
			MethodName: "ReviewList",
			Handler:    _Review_ReviewList_Handler,
		},
		{
			MethodName: "ReviewUpdate",
			Handler:    _Review_ReviewUpdate_Handler,
		},
		{
			MethodName: "ReviewDelete",
			Handler:    _Review_ReviewDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review.proto",
}
