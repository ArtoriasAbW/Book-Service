// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookClient is the client API for Book service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookClient interface {
	BookGet(ctx context.Context, in *BookGetRequest, opts ...grpc.CallOption) (*BookGetResponse, error)
	BookCreate(ctx context.Context, in *BookCreateRequest, opts ...grpc.CallOption) (*BookCreateResponse, error)
	BookList(ctx context.Context, in *BookListRequest, opts ...grpc.CallOption) (*BookListResponse, error)
	BookUpdate(ctx context.Context, in *BookUpdateRequest, opts ...grpc.CallOption) (*BookUpdateResponse, error)
	BookDelete(ctx context.Context, in *BookDeleteRequest, opts ...grpc.CallOption) (*BookDeleteResponse, error)
}

type bookClient struct {
	cc grpc.ClientConnInterface
}

func NewBookClient(cc grpc.ClientConnInterface) BookClient {
	return &bookClient{cc}
}

func (c *bookClient) BookGet(ctx context.Context, in *BookGetRequest, opts ...grpc.CallOption) (*BookGetResponse, error) {
	out := new(BookGetResponse)
	err := c.cc.Invoke(ctx, "/book.api.Book/BookGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) BookCreate(ctx context.Context, in *BookCreateRequest, opts ...grpc.CallOption) (*BookCreateResponse, error) {
	out := new(BookCreateResponse)
	err := c.cc.Invoke(ctx, "/book.api.Book/BookCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) BookList(ctx context.Context, in *BookListRequest, opts ...grpc.CallOption) (*BookListResponse, error) {
	out := new(BookListResponse)
	err := c.cc.Invoke(ctx, "/book.api.Book/BookList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) BookUpdate(ctx context.Context, in *BookUpdateRequest, opts ...grpc.CallOption) (*BookUpdateResponse, error) {
	out := new(BookUpdateResponse)
	err := c.cc.Invoke(ctx, "/book.api.Book/BookUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) BookDelete(ctx context.Context, in *BookDeleteRequest, opts ...grpc.CallOption) (*BookDeleteResponse, error) {
	out := new(BookDeleteResponse)
	err := c.cc.Invoke(ctx, "/book.api.Book/BookDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServer is the server API for Book service.
// All implementations must embed UnimplementedBookServer
// for forward compatibility
type BookServer interface {
	BookGet(context.Context, *BookGetRequest) (*BookGetResponse, error)
	BookCreate(context.Context, *BookCreateRequest) (*BookCreateResponse, error)
	BookList(context.Context, *BookListRequest) (*BookListResponse, error)
	BookUpdate(context.Context, *BookUpdateRequest) (*BookUpdateResponse, error)
	BookDelete(context.Context, *BookDeleteRequest) (*BookDeleteResponse, error)
	mustEmbedUnimplementedBookServer()
}

// UnimplementedBookServer must be embedded to have forward compatible implementations.
type UnimplementedBookServer struct {
}

func (UnimplementedBookServer) BookGet(context.Context, *BookGetRequest) (*BookGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookGet not implemented")
}
func (UnimplementedBookServer) BookCreate(context.Context, *BookCreateRequest) (*BookCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookCreate not implemented")
}
func (UnimplementedBookServer) BookList(context.Context, *BookListRequest) (*BookListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookList not implemented")
}
func (UnimplementedBookServer) BookUpdate(context.Context, *BookUpdateRequest) (*BookUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookUpdate not implemented")
}
func (UnimplementedBookServer) BookDelete(context.Context, *BookDeleteRequest) (*BookDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookDelete not implemented")
}
func (UnimplementedBookServer) mustEmbedUnimplementedBookServer() {}

// UnsafeBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServer will
// result in compilation errors.
type UnsafeBookServer interface {
	mustEmbedUnimplementedBookServer()
}

func RegisterBookServer(s grpc.ServiceRegistrar, srv BookServer) {
	s.RegisterService(&Book_ServiceDesc, srv)
}

func _Book_BookGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).BookGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.api.Book/BookGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).BookGet(ctx, req.(*BookGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_BookCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).BookCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.api.Book/BookCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).BookCreate(ctx, req.(*BookCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_BookList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).BookList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.api.Book/BookList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).BookList(ctx, req.(*BookListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_BookUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).BookUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.api.Book/BookUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).BookUpdate(ctx, req.(*BookUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_BookDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).BookDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.api.Book/BookDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).BookDelete(ctx, req.(*BookDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Book_ServiceDesc is the grpc.ServiceDesc for Book service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Book_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.api.Book",
	HandlerType: (*BookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookGet",
			Handler:    _Book_BookGet_Handler,
		},
		{
			MethodName: "BookCreate",
			Handler:    _Book_BookCreate_Handler,
		},
		{
			MethodName: "BookList",
			Handler:    _Book_BookList_Handler,
		},
		{
			MethodName: "BookUpdate",
			Handler:    _Book_BookUpdate_Handler,
		},
		{
			MethodName: "BookDelete",
			Handler:    _Book_BookDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
